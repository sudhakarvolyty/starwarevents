<?php

namespace Yoda\UserBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository implements UserProviderInterface
{
    /**
     * @param $nameOrEmail
     * @return User|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneByNameOrEmail($nameOrEmail)
    {
        return $queryBuilder = $this->createQueryBuilder('u')
            ->andWhere('u.username = :UserName OR u.email = :Email')
            ->setParameter('UserName', $nameOrEmail)
            ->setParameter('Email', $nameOrEmail)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function loadUserByUsername($username)
    {
        $user = $this->findOneByNameOrEmail($username);
        if (!$user) {
            throw new UsernameNotFoundException('No user found for' . $username);
        }
        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf(
                'Instance of "%s" are not supported',
                $class
            ));
        }
        if (!$refreshedUser = $this->find($user->getId())) {
            throw new UsernameNotFoundException(sprintf(
                'User with id %s is not found', json_encode($user)
            ));
        }

        return $refreshedUser;

    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }


}
